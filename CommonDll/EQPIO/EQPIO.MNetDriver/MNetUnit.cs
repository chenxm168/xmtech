// Generated by .NET Reflector from D:\桌面\新建文件夹\10.EQPIO_release_v2.17.07.12\bin\EQPIO.MNetDriver.dll
namespace EQPIO.MNetDriver
{
    using EQPIO.Common;
    using EQPIO.MessageData;
    using log4net;
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;
    using System.Threading;

    public class MNetUnit
    {
        private ILog logger;
        private bool m_bTimeoutCheck;
        private Dictionary<MNetDev, DateTime> m_dicTimeoutCheck;
        private int m_iTimeoutCheckLimit;
        private Thread m_tTimeOutCheck;
        private IMNetDriver netWorkPlc;
        private object objTimeoutCheckLock;
        private IMNetDriver plc;
        private BlockMap plcBlockMap;
        private Receive plcReceivedTransaction;
        private Scan plcScan;
        private Send plcWriteTransaction;
        private Dictionary<string, TransactionCheckTimeOut> timeCheckList;

        public event ErrorMessageHandler OnErrorMessage;

        public event ScanTimeoutHandler OnTimeoutEvent;

        public MNetUnit(int channel, BlockMap plcMap, DataGathering dataGathering, Transaction trx)
        {
            this.logger = LogManager.GetLogger(typeof(MNetUnit));
            this.timeCheckList = new Dictionary<string, TransactionCheckTimeOut>();
            this.m_iTimeoutCheckLimit = 0;
            this.m_bTimeoutCheck = false;
            this.m_dicTimeoutCheck = new Dictionary<MNetDev, DateTime>();
            this.objTimeoutCheckLock = new object();
            this.Channel = channel;
            this.plcBlockMap = plcMap;
            this.plcScan = dataGathering.Scan;
            this.plcWriteTransaction = trx.Send;
            this.plcReceivedTransaction = trx.Receive;
            switch (channel)
            {
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                    this.plc = new MNetDriverH();
                    this.netWorkPlc = new MNetDriverH();
                    break;

                case 0x97:
                case 0x98:
                case 0x99:
                case 0x9a:
                    this.plc = new MNetDriverG();
                    this.netWorkPlc = new MNetDriverG();
                    break;
            }
            this.plc.OnErrorMessage += new IMNetDriver.ErrorMessage(this.plc_OnErrorMessage);
            this.m_tTimeOutCheck = new Thread(new ThreadStart(this.TimeOutCheckProc));
            this.m_tTimeOutCheck.Name = "TimeOutCheckProc";
            this.m_tTimeOutCheck.IsBackground = true;
        }

        public MNetUnit(int channel, BlockMap plcMap, DataGathering dataGathering, Transaction trx, int timeoutCheckLimit)
        {
            this.logger = LogManager.GetLogger(typeof(MNetUnit));
            this.timeCheckList = new Dictionary<string, TransactionCheckTimeOut>();
            this.m_iTimeoutCheckLimit = 0;
            this.m_bTimeoutCheck = false;
            this.m_dicTimeoutCheck = new Dictionary<MNetDev, DateTime>();
            this.objTimeoutCheckLock = new object();
            this.Channel = channel;
            this.plcBlockMap = plcMap;
            this.plcScan = dataGathering.Scan;
            this.plcWriteTransaction = trx.Send;
            this.plcReceivedTransaction = trx.Receive;
            this.m_iTimeoutCheckLimit = timeoutCheckLimit;
            switch (channel)
            {
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                    this.plc = new MNetDriverH();
                    this.netWorkPlc = new MNetDriverH();
                    break;

                case 0x97:
                case 0x98:
                case 0x99:
                case 0x9a:
                    this.plc = new MNetDriverG();
                    this.netWorkPlc = new MNetDriverG();
                    break;
            }
            this.plc.OnErrorMessage += new IMNetDriver.ErrorMessage(this.plc_OnErrorMessage);
            this.m_tTimeOutCheck = new Thread(new ThreadStart(this.TimeOutCheckProc));
            this.m_tTimeOutCheck.Name = "TimeOutCheckProc";
            this.m_tTimeOutCheck.IsBackground = true;
        }

        public void Close()
        {
            if (this.plc.IsOpened)
            {
                this.plc.Close();
            }
            if (this.netWorkPlc.IsOpened)
            {
                this.netWorkPlc.Close();
            }
            this.m_bTimeoutCheck = false;
        }

        public EQPIO.MessageData.MessageData<PLCMessageBody> DataCollect(EQPIO.MessageData.MessageData<PLCMessageBody> mdata, Trx trx, bool flag)
        {
            try
            {
                foreach (MultiBlock block in trx.MultiBlock)
                {
                    if ((flag || (!flag && trx.BitOffReadAction)) && (block.Action == "R"))
                    {
                        foreach (Block block2 in block.Block)
                        {
                            mdata.MessageBody.ReadDataList.Add(block2.Name, null);
                        }
                    }
                    else if ((flag || (!flag && trx.BitOffEvent)) && (block.Action == "W"))
                    {
                        foreach (Block block2 in block.Block)
                        {
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            if (block2.Item == null)
                            {
                                this.logger.Error(string.Format("Block Item is Null, Trx Name {0}, Block Name : {1}", trx.Name, block2.Name));
                            }
                            else
                            {
                                foreach (Item item in block2.Item)
                                {
                                    if (item.SyncValue)
                                    {
                                        dictionary.Add(item.Name, flag ? "1" : "0");
                                    }
                                    else
                                    {
                                        dictionary.Add(item.Name, item.Value);
                                    }
                                }
                                mdata.MessageBody.WriteDataList.Add(block2.Name, dictionary);
                            }
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
            return mdata;
        }

        public EQPIO.MessageData.MessageData<PLCMessageBody> EventTransaction(EQPIO.MessageData.MessageData<PLCMessageBody> mData, Trx trx, bool flag)
        {
            if (mData.MessageBody.ReadDataList.Count > 0)
            {
                mData = this.TransactionReadData(mData, trx);
            }
            if (mData.MessageBody.WriteDataList.Count > 0)
            {
                this.TransactionWriteData(mData, trx);
            }
            return mData;
        }

        public bool InitMNet()
        {
            if (!this.plc.Open(this.Channel) || !this.netWorkPlc.Open(this.Channel))
            {
                if (this.plc.IsOpened)
                {
                    this.plc.Close();
                }
                if (this.netWorkPlc.IsOpened)
                {
                    this.netWorkPlc.Close();
                }
                return false;
            }
            return true;
        }

        private EQPIO.MessageData.MessageData<PLCMessageBody> NetWorkRorZRReadData(EQPIO.MessageData.MessageData<PLCMessageBody> data, Trx trx, Block block)
        {
            try
            {
                ushort networkNo = 0;
                ushort stationNo = 0;
                foreach (MultiBlock block2 in trx.MultiBlock)
                {
                    if (!string.IsNullOrEmpty(block2.NetworkNo))
                    {
                        networkNo = (ushort)Convert.ToInt32(block2.NetworkNo);
                    }
                    if (!string.IsNullOrEmpty(block2.NetworkNo))
                    {
                        stationNo = (ushort)Convert.ToInt32(block2.PCNo);
                    }
                    foreach (Block block3 in block2.Block)
                    {
                        if (block3.Name == block.Name)
                        {
                            if ((networkNo == 0) || (stationNo == 0))
                            {
                                data.ReturnCode = 1;
                                data.ReturnMessage = string.Format("NetworkNo or PCNo is 0, TrxName {0}, Address : {1}", trx.Name, block.address);
                                break;
                            }
                            data.MessageBody.ReadDataList[block.Name] = this.ReadNetworkWord(block, networkNo, stationNo);
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
            return data;
        }

        private void plc_OnErrorMessage(string message)
        {
            message = "[MNetUnit] " + message;
            this.OnErrorMessage(message);
        }

        public Dictionary<string, string> ReadBit(Block block)
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            string str = block.address.ToString();
            string name = string.Empty;
            try
            {
                foreach (Item item in block.Item)
                {
                    name = item.Name;
                    string str3 = this.plc.ReadBit(block.address + int.Parse(item.Offset));
                    dictionary.Add(item.Name, str3);
                    if ((item.Name.ToUpper() != "MACHINEHEARTBEATSIGNAL") && (item.Name.ToUpper() != "EQUIPMENTALIVE"))
                    {
                        this.logger.Info(string.Format("[ReadBit] Item Name : {0}, Data : {1}", item.Name, str3));
                    }
                    if (dictionary[item.Name] == null)
                    {
                        return null;
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(string.Format("ReadBit Error : {0}, address : {1}, itemname : {2} ", exception.Message, str, name));
            }
            return dictionary;
        }

        public Dictionary<string, string> ReadNetworkWord(Block block, ushort networkNo, ushort stationNo)
        {
            this.netWorkPlc.Station = stationNo;
            this.netWorkPlc.Network = networkNo;
            string str = block.address.ToString();
            string name = string.Empty;
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            try
            {
                byte[] dst = new byte[block.Points * 2];
                int num = Convert.ToInt32(block.HeadDevice) + block.Points;
                int nLen = num - ((num / 0x8000) * 0x8000);
                if ((((num / 0x8000) > 0) & (0x40 > nLen)) && (nLen > 0))
                {
                    byte[] src = this.netWorkPlc.ReadBlock(block.address, (int)(block.Points - nLen));
                    int num7 = (Convert.ToInt32(block.HeadDevice) + block.Points) - nLen;
                    byte[] buffer3 = this.netWorkPlc.ReadBlock(new MNetDev(block.DeviceCode + num7.ToString()), nLen);
                    Buffer.BlockCopy(src, 0, dst, 0, src.Length);
                    Buffer.BlockCopy(buffer3, 0, dst, src.Length, buffer3.Length);
                }
                else
                {
                    dst = this.netWorkPlc.ReadBlock(block.address, block.Points);
                }
                foreach (Item item in block.Item)
                {
                    byte[] buffer4;
                    byte[] buffer5;
                    int num6;
                    ushort[] numArray2;
                    name = item.Name;
                    string[] strArray = item.Offset.Split(new char[] { ':' });
                    string[] strArray2 = item.Points.Split(new char[] { ':' });
                    string representation = item.Representation;
                    if (representation == null)
                    {
                        goto Label_07DC;
                    }
                    if (!(representation == "A"))
                    {
                        if (representation == "I")
                        {
                            goto Label_028A;
                        }
                        if (representation == "B")
                        {
                            goto Label_0465;
                        }
                        if (representation == "H")
                        {
                            goto Label_05DA;
                        }
                        if (representation == "SI")
                        {
                            goto Label_06B7;
                        }
                        goto Label_07DC;
                    }
                    int count = 0;
                    count = 0;
                    while (count < (int.Parse(strArray2[0]) * 2))
                    {
                        if (dst[(int.Parse(strArray[0]) * 2) + count] == 0)
                        {
                            break;
                        }
                        count++;
                    }
                    string str3 = Encoding.Default.GetString(dst, int.Parse(strArray[0]) * 2, count).Trim();
                    dictionary.Add(item.Name, str3);
                    this.logger.Info(string.Format("[ReadNetworkWord] ASCII Item Name : {0}, Data : {1}", item.Name, str3));
                    continue;
                Label_028A:
                    if (strArray.Length > 1)
                    {
                        buffer4 = new byte[4];
                        Buffer.BlockCopy(dst, int.Parse(strArray[0]) * 2, buffer4, 0, 2);
                        string str4 = Convert.ToString(BitConverter.ToInt32(buffer4, 0), 2).PadLeft(0x10, '0').Substring((0x10 - int.Parse(strArray[1])) - int.Parse(strArray2[1]), int.Parse(strArray2[1]));
                        dictionary.Add(item.Name, Convert.ToInt32(str4, 2).ToString());
                        this.logger.Info(string.Format("[ReadNetworkWord] Int Item Name : {0}, Data : {1}", item.Name, Convert.ToInt32(str4, 2).ToString()));
                    }
                    else
                    {
                        representation = strArray2[0];
                        if (representation != null)
                        {
                            if (!(representation == "1"))
                            {
                                if (representation == "2")
                                {
                                    goto Label_03EF;
                                }
                            }
                            else
                            {
                                buffer4 = new byte[4];
                                Buffer.BlockCopy(dst, int.Parse(item.Offset) * 2, buffer4, 0, 2);
                                dictionary.Add(item.Name, BitConverter.ToUInt16(buffer4, 0).ToString());
                                this.logger.Info(string.Format("[ReadNetworkWord] Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToUInt16(buffer4, 0)));
                            }
                        }
                    }
                    continue;
                Label_03EF:
                    buffer5 = new byte[4];
                    Buffer.BlockCopy(dst, int.Parse(item.Offset) * 2, buffer5, 0, 4);
                    dictionary.Add(item.Name, BitConverter.ToUInt32(buffer5, 0).ToString());
                    this.logger.Info(string.Format("[ReadNetworkWord] Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToUInt32(buffer5, 0).ToString()));
                    continue;
                Label_0465:
                    if (strArray.Length > 1)
                    {
                        string str5 = this.netWorkPlc.ReadBitString(block.address + int.Parse(strArray[0]), int.Parse(strArray2[0])).Substring(int.Parse(strArray[1]), int.Parse(strArray2[1]));
                        dictionary.Add(item.Name, str5);
                        this.logger.Info(string.Format("[ReadNetworkWord] B Item Name : {0}, Data : {1}", item.Name, str5));
                    }
                    else
                    {
                        ushort[] numArray = new ushort[int.Parse(item.Points)];
                        Buffer.BlockCopy(dst, int.Parse(item.Offset) * 2, numArray, 0, int.Parse(item.Points) * 2);
                        string data = string.Empty;
                        foreach (short num5 in numArray)
                        {
                            num6 = 0;
                            while (num6 < 0x10)
                            {
                                data = data + (((num5 & (((int)1) << num6)) == 0) ? '0' : '1');
                                num6++;
                            }
                        }
                        string str7 = string.Empty;
                        str7 = MNetUtils.CharRevcrse(data) + str7;
                        dictionary.Add(item.Name, str7);
                        this.logger.Info(string.Format("[ReadNetworkWord] B Item Name : {0}, Data : {1}", item.Name, str7));
                    }
                    continue;
                Label_05DA:
                    numArray2 = this.netWorkPlc.ReadWordBlock(block.address + int.Parse(strArray[0]), int.Parse(strArray2[0]));
                    string str8 = string.Empty;
                    string str9 = string.Empty;
                    string str10 = string.Empty;
                    for (num6 = 0; num6 < numArray2.Length; num6++)
                    {
                        str8 = string.Empty;
                        str9 = Convert.ToString((int)numArray2[num6], 0x10).PadLeft(4, '0');
                        str10 = (str8 + str9.Substring(0, 2)) + str9.Substring(2) + str10;
                    }
                    dictionary.Add(item.Name, str10);
                    this.logger.Info(string.Format("[ReadNetworkWord] H Item Name : {0}, Data : {1}", item.Name, str10));
                    continue;
                Label_06B7:
                    if (strArray.Length <= 1)
                    {
                        representation = strArray2[0];
                        if (representation != null)
                        {
                            if (!(representation == "1"))
                            {
                                if (representation == "2")
                                {
                                    goto Label_0769;
                                }
                            }
                            else
                            {
                                buffer4 = new byte[4];
                                Buffer.BlockCopy(dst, int.Parse(item.Offset) * 2, buffer4, 0, 2);
                                dictionary.Add(item.Name, BitConverter.ToInt16(buffer4, 0).ToString());
                                this.logger.Info(string.Format("[ReadNetworkWord] Signed Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToInt16(buffer4, 0)));
                            }
                        }
                    }
                    continue;
                Label_0769:
                    buffer5 = new byte[4];
                    Buffer.BlockCopy(dst, int.Parse(item.Offset) * 2, buffer5, 0, 4);
                    dictionary.Add(item.Name, BitConverter.ToInt32(buffer5, 0).ToString());
                    this.logger.Info(string.Format("[ReadNetworkWord] Signed Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToInt32(buffer5, 0).ToString()));
                    continue;
                Label_07DC:
                    this.logger.Error(string.Format("ReadNetworkWord invalid Representation : {0}", item.Representation));
                }
                return dictionary;
            }
            catch (Exception exception)
            {
                this.logger.Error(string.Format("ReadNetworkWord Error : {0}, address : {1}, itemname : {2} ", exception.Message, str, name));
                return dictionary;
            }
        }

        public Dictionary<string, string> ReadWord(Block block)
        {
            string str = block.address.ToString();
            string name = string.Empty;
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            try
            {
                byte[] bytes = this.plc.ReadBlock(block.address, block.Points);
                foreach (Item item in block.Item)
                {
                    byte[] buffer2;
                    byte[] buffer3;
                    int num4;
                    ushort[] numArray2;
                    name = item.Name;
                    string[] strArray = item.Offset.Split(new char[] { ':' });
                    string[] strArray2 = item.Points.Split(new char[] { ':' });
                    string representation = item.Representation;
                    if (representation == null)
                    {
                        goto Label_06E8;
                    }
                    if (!(representation == "A"))
                    {
                        if (representation == "I")
                        {
                            goto Label_0196;
                        }
                        if (representation == "B")
                        {
                            goto Label_0371;
                        }
                        if (representation == "H")
                        {
                            goto Label_04E6;
                        }
                        if (representation == "SI")
                        {
                            goto Label_05C3;
                        }
                        goto Label_06E8;
                    }
                    int count = 0;
                    count = 0;
                    while (count < (int.Parse(strArray2[0]) * 2))
                    {
                        if (bytes[(int.Parse(strArray[0]) * 2) + count] == 0)
                        {
                            break;
                        }
                        count++;
                    }
                    string str3 = Encoding.Default.GetString(bytes, int.Parse(strArray[0]) * 2, count).Trim();
                    dictionary.Add(item.Name, str3);
                    this.logger.Info(string.Format("[ReadWord] ASCII Item Name : {0}, Data : {1}", item.Name, str3));
                    continue;
                Label_0196:
                    if (strArray.Length > 1)
                    {
                        buffer2 = new byte[4];
                        Buffer.BlockCopy(bytes, int.Parse(strArray[0]) * 2, buffer2, 0, 2);
                        string str4 = Convert.ToString(BitConverter.ToInt32(buffer2, 0), 2).PadLeft(0x10, '0').Substring((0x10 - int.Parse(strArray[1])) - int.Parse(strArray2[1]), int.Parse(strArray2[1]));
                        dictionary.Add(item.Name, Convert.ToInt32(str4, 2).ToString());
                        this.logger.Info(string.Format("[ReadWord] Int Item Name : {0}, Data : {1}", item.Name, Convert.ToInt32(str4, 2).ToString()));
                    }
                    else
                    {
                        representation = strArray2[0];
                        if (representation != null)
                        {
                            if (!(representation == "1"))
                            {
                                if (representation == "2")
                                {
                                    goto Label_02FB;
                                }
                            }
                            else
                            {
                                buffer2 = new byte[4];
                                Buffer.BlockCopy(bytes, int.Parse(item.Offset) * 2, buffer2, 0, 2);
                                dictionary.Add(item.Name, BitConverter.ToUInt16(buffer2, 0).ToString());
                                this.logger.Info(string.Format("[ReadWord] Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToUInt16(buffer2, 0)));
                            }
                        }
                    }
                    continue;
                Label_02FB:
                    buffer3 = new byte[4];
                    Buffer.BlockCopy(bytes, int.Parse(item.Offset) * 2, buffer3, 0, 4);
                    dictionary.Add(item.Name, BitConverter.ToUInt32(buffer3, 0).ToString());
                    this.logger.Info(string.Format("[ReadWord] Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToUInt32(buffer3, 0).ToString()));
                    continue;
                Label_0371:
                    if (strArray.Length > 1)
                    {
                        string str5 = this.plc.ReadBitString(block.address + int.Parse(strArray[0]), int.Parse(strArray2[0])).Substring(int.Parse(strArray[1]), int.Parse(strArray2[1]));
                        dictionary.Add(item.Name, str5);
                        this.logger.Info(string.Format("[ReadWord] B Item Name : {0}, Data : {1}", item.Name, str5));
                    }
                    else
                    {
                        ushort[] dst = new ushort[int.Parse(item.Points)];
                        Buffer.BlockCopy(bytes, int.Parse(item.Offset) * 2, dst, 0, int.Parse(item.Points) * 2);
                        string data = string.Empty;
                        foreach (short num3 in dst)
                        {
                            num4 = 0;
                            while (num4 < 0x10)
                            {
                                data = data + (((num3 & (((int)1) << num4)) == 0) ? '0' : '1');
                                num4++;
                            }
                        }
                        string str7 = string.Empty;
                        str7 = MNetUtils.CharRevcrse(data) + str7;
                        dictionary.Add(item.Name, str7);
                        this.logger.Info(string.Format("[ReadWord] B Item Name : {0}, Data : {1}", item.Name, str7));
                    }
                    continue;
                Label_04E6:
                    numArray2 = this.plc.ReadWordBlock(block.address + int.Parse(strArray[0]), int.Parse(strArray2[0]));
                    string str8 = string.Empty;
                    string str9 = string.Empty;
                    string str10 = string.Empty;
                    for (num4 = 0; num4 < numArray2.Length; num4++)
                    {
                        str8 = string.Empty;
                        str9 = Convert.ToString((int)numArray2[num4], 0x10).PadLeft(4, '0');
                        str10 = (str8 + str9.Substring(0, 2)) + str9.Substring(2) + str10;
                    }
                    dictionary.Add(item.Name, str10);
                    this.logger.Info(string.Format("[ReadWord] H Item Name : {0}, Data : {1}", item.Name, str10));
                    continue;
                Label_05C3:
                    if (strArray.Length <= 1)
                    {
                        representation = strArray2[0];
                        if (representation != null)
                        {
                            if (!(representation == "1"))
                            {
                                if (representation == "2")
                                {
                                    goto Label_0675;
                                }
                            }
                            else
                            {
                                buffer2 = new byte[4];
                                Buffer.BlockCopy(bytes, int.Parse(item.Offset) * 2, buffer2, 0, 2);
                                dictionary.Add(item.Name, BitConverter.ToInt16(buffer2, 0).ToString());
                                this.logger.Info(string.Format("[ReadWord] Signed Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToInt16(buffer2, 0)));
                            }
                        }
                    }
                    continue;
                Label_0675:
                    buffer3 = new byte[4];
                    Buffer.BlockCopy(bytes, int.Parse(item.Offset) * 2, buffer3, 0, 4);
                    dictionary.Add(item.Name, BitConverter.ToInt32(buffer3, 0).ToString());
                    this.logger.Info(string.Format("[ReadWord] Signed Int Item Name : {0}, Data : {1}", item.Name, BitConverter.ToInt32(buffer3, 0).ToString()));
                    continue;
                Label_06E8:
                    this.logger.Error(string.Format("ReadWord invalid Representation : {0}", item.Representation));
                }
                return dictionary;
            }
            catch (Exception exception)
            {
                this.logger.Error(string.Format("ReadWord Error : {0}, address : {1}, itemname : {2} ", exception.Message, str, name));
                return dictionary;
            }
        }

        public void SetChekTimeOut()
        {
            try
            {
                foreach (Trx trx in this.plcWriteTransaction.Trx)
                {
                    this.SetChekTimeOutItem(trx);
                }
                foreach (Trx trx in this.plcReceivedTransaction.Trx)
                {
                    this.SetChekTimeOutItem(trx);
                }
                this.logger.Info(string.Format("SetChekTimeOut List Count : {0}", this.timeCheckList.Count));
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
        }

        private void SetChekTimeOutItem(Trx trx)
        {
            try
            {
                MultiBlock[] multiBlock = trx.MultiBlock;
                foreach (MultiBlock multiBlock2 in multiBlock)
                {
                    if (!(multiBlock2.Action == "R"))
                    {
                        Block[] block2 = multiBlock2.Block;
                        Block block;
                        for (int j = 0; j < block2.Length; j++)
                        {
                            block = block2[j];
                            if (block.Item != null)
                            {
                                Block block3 = (from name in plcBlockMap.Block
                                                where name.Name == block.Name
                                                select name).FirstOrDefault();
                                if (block3 != null && !(block3.DeviceCode != "B") && block3.Item != null)
                                {
                                    if (!timeCheckList.ContainsKey(trx.Name))
                                    {
                                        timeCheckList.Add(trx.Name, new TransactionCheckTimeOut());
                                    }
                                    Item[] item = block.Item;
                                    Item blockItem;
                                    for (int k = 0; k < item.Length; k++)
                                    {
                                        blockItem = item[k];
                                        Item item2 = (from name in block3.Item
                                                      where name.Name == blockItem.Name
                                                      select name).FirstOrDefault();
                                        if (item2 != null)
                                        {
                                            timeCheckList[trx.Name].Name = item2.Name;
                                            timeCheckList[trx.Name].Interval = ((m_iTimeoutCheckLimit >= 4) ? m_iTimeoutCheckLimit : 4);
                                            timeCheckList[trx.Name].Address = block3.address + int.Parse(item2.Offset);
                                            timeCheckList[trx.Name].LastOnTime = DateTime.Now;
                                            timeCheckList[trx.Name].Value = "0";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception message)
            {
                logger.Error(message);
            }
        }

        private void TimeOutCheck()
        {
            try
            {
                int num = 0;
                foreach (string str in this.timeCheckList.Keys)
                {
                    string str2 = this.plc.ReadBit(this.timeCheckList[str].Address);
                    if (str2 != null)
                    {
                        if (!(str2 == "0"))
                        {
                            if (str2 == "1")
                            {
                                goto Label_0087;
                            }
                        }
                        else
                        {
                            this.timeCheckList[str].Value = "0";
                        }
                    }
                    continue;
                Label_0087:
                    if (this.timeCheckList[str].Value == "1")
                    {
                        TimeSpan span = (TimeSpan)(DateTime.Now - this.timeCheckList[str].LastOnTime);
                        num = ((int)span.TotalSeconds) - this.timeCheckList[str].Interval;
                        if (span.TotalSeconds > this.timeCheckList[str].Interval)
                        {
                            if (((Globalproperties.Instance != null) && (Globalproperties.Instance.DicTimeoutCheckItem.Count > 0)) && Globalproperties.Instance.DicTimeoutCheckItem.ContainsKey(this.timeCheckList[str].Name.ToUpper()))
                            {
                                if (Globalproperties.Instance.DicTimeoutCheckItem[this.timeCheckList[str].Name.ToUpper()].Skip)
                                {
                                    this.timeCheckList[str].Value = "0";
                                    continue;
                                }
                                if (Globalproperties.Instance.DicTimeoutCheckItem[this.timeCheckList[str].Name.ToUpper()].ExtensionInterval < num)
                                {
                                    continue;
                                }
                            }
                            this.plc.WriteBit(this.timeCheckList[str].Address, false);
                            string[] strArray = str.Split(new char[] { '_' });
                            this.logger.Error(string.Format("Local Time Out Event - Local : {0} , BC Address : {1} , ItemName : {2}", strArray[0], this.timeCheckList[str].Address, this.timeCheckList[str].Name));
                            this.OnTimeoutEvent(this, strArray[0]);
                        }
                    }
                    else
                    {
                        this.timeCheckList[str].Value = "1";
                        this.timeCheckList[str].LastOnTime = DateTime.Now;
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
        }

        private void TimeoutCheckListManagement(MNetDev address, bool isOnWrite)
        {
            try
            {
                object obj2;
                if (isOnWrite)
                {
                    if (!this.m_dicTimeoutCheck.ContainsKey(address))
                    {
                        lock ((obj2 = this.objTimeoutCheckLock))
                        {
                            this.m_dicTimeoutCheck.Add(address, DateTime.Now);
                        }
                    }
                }
                else if (this.m_dicTimeoutCheck.ContainsKey(address))
                {
                    lock ((obj2 = this.objTimeoutCheckLock))
                    {
                        this.m_dicTimeoutCheck.Remove(address);
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
        }

        private void TimeOutCheckProc()
        {
            try
            {
                while (this.m_bTimeoutCheck)
                {
                    this.TimeOutCheck();
                    Thread.Sleep(50);
                }
            }
            catch (ThreadAbortException)
            {
                Thread.ResetAbort();
            }
        }

        private void TimeOutCheckProcNew()
        {
            try
            {
                while (this.m_bTimeoutCheck)
                {
                    if (this.m_dicTimeoutCheck.Count > 0)
                    {
                        foreach (KeyValuePair<MNetDev, DateTime> pair in this.m_dicTimeoutCheck)
                        {
                            TimeSpan span = (TimeSpan)(DateTime.Now - pair.Value);
                            if (span.TotalMilliseconds >= 4000.0)
                            {
                                this.plc.WriteBit(pair.Key, false);
                            }
                        }
                    }
                    Thread.Sleep(2);
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
        }

        public void TimeoutCheckThreadStart()
        {
            if (this.plc.IsOpened)
            {
                this.m_bTimeoutCheck = true;
                this.m_tTimeOutCheck.Start();
                this.logger.Info("TimeoutCheck Thread Start...");
            }
        }

        public void TimeoutCheckThreadStop()
        {
            if ((this.m_tTimeOutCheck != null) && this.m_tTimeOutCheck.IsAlive)
            {
                this.m_tTimeOutCheck.Abort();
                this.m_tTimeOutCheck.Join(0x3e8);
            }
            this.m_bTimeoutCheck = false;
            this.logger.Info("TimeoutCheck Thread Stop...");
        }

        private EQPIO.MessageData.MessageData<PLCMessageBody> TransactionReadData(EQPIO.MessageData.MessageData<PLCMessageBody> data, Trx trx)
        {
            try
            {
                using (List<Block>.Enumerator enumerator = this.plcBlockMap.Block.GetEnumerator())
                {
                    Func<string, bool> predicate = null;
                    Block block;
                    while (enumerator.MoveNext())
                    {
                        block = enumerator.Current;
                        if (predicate == null)
                        {
                            predicate = keyName => keyName == block.Name;
                        }
                        string str = data.MessageBody.ReadDataList.Keys.Where<string>(predicate).FirstOrDefault<string>();
                        if (str != null)
                        {
                            string deviceCode = block.DeviceCode;
                            if (deviceCode != null)
                            {
                                if (!(deviceCode == "B"))
                                {
                                    if (deviceCode == "W")
                                    {
                                        goto Label_00DA;
                                    }
                                    if ((deviceCode == "R") || (deviceCode == "ZR"))
                                    {
                                        goto Label_00FA;
                                    }
                                }
                                else
                                {
                                    data.MessageBody.ReadDataList[str] = this.ReadBit(block);
                                }
                            }
                        }
                        continue;
                    Label_00DA:
                        data.MessageBody.ReadDataList[str] = this.ReadWord(block);
                        continue;
                    Label_00FA:
                        data = this.NetWorkRorZRReadData(data, trx, block);
                    }
                }
            }
            catch (Exception exception)
            {
                this.logger.Error(exception);
            }
            return data;
        }
        private bool TransactionWriteData(MessageData<PLCMessageBody> data, Trx trx)
        {
            int num = 0;
            try
            {
                ushort netwrokNo = 0;
                ushort stationNo = 0;
                MultiBlock[] multiBlock = trx.MultiBlock;
                foreach (MultiBlock multiBlock2 in multiBlock)
                {
                    if (!string.IsNullOrEmpty(multiBlock2.NetworkNo))
                    {
                        netwrokNo = (ushort)Convert.ToInt32(multiBlock2.NetworkNo);
                    }
                    if (!string.IsNullOrEmpty(multiBlock2.NetworkNo))
                    {
                        stationNo = (ushort)Convert.ToInt32(multiBlock2.PCNo);
                    }
                    Block[] block2 = multiBlock2.Block;
                    Block sendBlock;
                    for (int j = 0; j < block2.Length; j++)
                    {
                        sendBlock = block2[j];
                        Block block3 = (from block in plcBlockMap.Block
                                        where block.Name == sendBlock.Name
                                        select block).FirstOrDefault();
                        if (block3 != null && data.MessageBody.WriteDataList.ContainsKey(block3.Name))
                        {
                            num++;
                            switch (block3.DeviceCode)
                            {
                                case "B":
                                    if (!WriteBit(block3, data.MessageBody.WriteDataList[block3.Name]))
                                    {
                                        return false;
                                    }
                                    break;
                                case "W":
                                    if (!WriteWord(block3, data.MessageBody.WriteDataList[block3.Name], 0, 0, false))
                                    {
                                        return false;
                                    }
                                    break;
                                case "R":
                                case "ZR":
                                case "D":
                                    if (!WriteWord(block3, data.MessageBody.WriteDataList[block3.Name], netwrokNo, stationNo, true))
                                    {
                                        return false;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception message)
            {
                logger.Error(message);
                return false;
            }
            return num > 0;
        }


        //private bool TransactionWriteData(EQPIO.MessageData.MessageData<PLCMessageBody> data, Trx trx)
        //{
        //    int num = 0;
        //    try
        //    {
        //        ushort netwrokNo = 0;
        //        ushort stationNo = 0;
        //        foreach (MultiBlock block in trx.MultiBlock)
        //        {
        //            if (!string.IsNullOrEmpty(block.NetworkNo))
        //            {
        //                netwrokNo = (ushort)Convert.ToInt32(block.NetworkNo);
        //            }
        //            if (!string.IsNullOrEmpty(block.NetworkNo))
        //            {
        //                stationNo = (ushort)Convert.ToInt32(block.PCNo);
        //            }
        //            Func<Block, bool> predicate = null;
        //            foreach (Block sendBlock in block.Block)
        //            {
        //                if (predicate == null)
        //                {
        //                   block.Name == sendBlock.Name;
        //                }
        //                Block block2 = this.plcBlockMap.Block.Where<Block>(predicate).FirstOrDefault<Block>();
        //                if ((block2 == null) || !data.MessageBody.WriteDataList.ContainsKey(block2.Name))
        //                {
        //                    continue;
        //                }
        //                num++;
        //                string deviceCode = block2.DeviceCode;
        //                if (deviceCode == null)
        //                {
        //                    continue;
        //                }
        //                if (!(deviceCode == "B"))
        //                {
        //                    if (deviceCode == "W")
        //                    {
        //                        goto Label_017E;
        //                    }
        //                    if (((deviceCode == "R") || (deviceCode == "ZR")) || (deviceCode == "D"))
        //                    {
        //                        goto Label_01B0;
        //                    }
        //                    continue;
        //                }
        //                if (this.WriteBit(block2, data.MessageBody.WriteDataList[block2.Name]))
        //                {
        //                    continue;
        //                }
        //                return false;
        //            Label_017E:
        //                if (this.WriteWord(block2, data.MessageBody.WriteDataList[block2.Name], 0, 0, false))
        //                {
        //                    continue;
        //                }
        //                return false;
        //            Label_01B0:
        //                if (!this.WriteWord(block2, data.MessageBody.WriteDataList[block2.Name], netwrokNo, stationNo, true))
        //                {
        //                    return false;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception exception)
        //    {
        //        this.logger.Error(exception);
        //        return false;
        //    }
        //    return (num > 0);
        //}

        public bool WriteBit(Block block, Dictionary<string, string> data)
        {
            string str = block.address.ToString();
            string name = string.Empty;
            try
            {
                foreach (Item item in block.Item)
                {
                    name = item.Name;
                    if (data == null)
                    {
                        if (this.plc.WriteBit(block.address + int.Parse(item.Offset), false))
                        {
                            this.TimeoutCheckListManagement(block.address + int.Parse(item.Offset), false);
                        }
                    }
                    else if (data.ContainsKey(item.Name))
                    {
                        bool flag = data[item.Name] == "1";
                        if (this.plc.WriteBit(block.address + int.Parse(item.Offset), flag))
                        {
                            if (flag)
                            {
                                this.TimeoutCheckListManagement(block.address + int.Parse(item.Offset), true);
                            }
                            else
                            {
                                this.TimeoutCheckListManagement(block.address + int.Parse(item.Offset), false);
                            }
                        }
                        this.logger.Info(string.Format("WriteBit BlockName : {0}, ItemName : {1}, Value : {2}", block.Name, item.Name, data[item.Name]));
                    }
                }
                return true;
            }
            catch (Exception exception)
            {
                this.logger.Error(string.Format("WriteBit Error : {0}, address : {1}, itemname : {2} ", exception.Message, str, name));
                return false;
            }
        }

        public bool WriteWord(Block block, Dictionary<string, string> data, ushort netwrokNo, ushort stationNo, bool networkFlag)
        {
            string str = block.address.ToString();
            string name = string.Empty;
            try
            {
                ushort[] dst = new ushort[block.Points];
                if (data != null)
                {
                    foreach (Item item in block.Item)
                    {
                        uint num;
                        int num2;
                        string str4;
                        int num3;
                        string representation;
                        name = item.Name;
                        string[] strArray = item.Offset.Split(new char[] { ':' });
                        string[] strArray2 = item.Points.Split(new char[] { ':' });
                        if (data.ContainsKey(item.Name))
                        {
                            representation = item.Representation;
                            if (representation == null)
                            {
                                goto Label_05EE;
                            }
                            if (!(representation == "A"))
                            {
                                if (representation == "I")
                                {
                                    goto Label_0174;
                                }
                                if (representation == "B")
                                {
                                    goto Label_02F0;
                                }
                                if (representation == "H")
                                {
                                    goto Label_045A;
                                }
                                if (representation == "SI")
                                {
                                    goto Label_0511;
                                }
                                goto Label_05EE;
                            }
                            byte[] bytes = Encoding.Default.GetBytes(data[item.Name].PadRight(int.Parse(item.Points) * 2));
                            Buffer.BlockCopy(bytes, 0, dst, int.Parse(item.Offset) * 2, bytes.Length);
                            this.logger.Info(string.Format("Write ASCII item : {0}", item.Name));
                        }
                        continue;
                    Label_0174:
                        if (strArray.Length > 1)
                        {
                            dst[int.Parse(strArray[0])] = (ushort)(dst[int.Parse(strArray[0])] | (string.IsNullOrEmpty(data[item.Name]) ? ((ushort)0) : ((ushort)(Convert.ToInt32(data[item.Name]) << int.Parse(strArray[1])))));
                            this.logger.Info(string.Format("Write Int item : {0}", item.Name));
                        }
                        else
                        {
                            representation = strArray2[0];
                            if (representation != null)
                            {
                                if (!(representation == "1"))
                                {
                                    if (representation == "2")
                                    {
                                        goto Label_0278;
                                    }
                                }
                                else
                                {
                                    dst[int.Parse(strArray[0])] = string.IsNullOrEmpty(data[item.Name]) ? ((ushort)0) : Convert.ToUInt16(data[item.Name]);
                                    this.logger.Info(string.Format("Write Int item : {0}", item.Name));
                                }
                            }
                        }
                        continue;
                    Label_0278:
                        num = string.IsNullOrEmpty(data[item.Name]) ? 0 : Convert.ToUInt32(data[item.Name].ToString());
                        dst[int.Parse(strArray[0])] = MNetUtils.LoWord(num);
                        dst[int.Parse(strArray[0]) + 1] = MNetUtils.HiWord(num);
                        this.logger.Info(string.Format("Write Int item : {0}", item.Name));
                        continue;
                    Label_02F0:
                        if (strArray.Length > 1)
                        {
                            dst[int.Parse(strArray[0])] = (ushort)(dst[int.Parse(strArray[0])] | (string.IsNullOrEmpty(data[item.Name]) ? ((ushort)0) : ((Convert.ToInt32(data[item.Name]) <= 0) ? ((ushort)0) : ((ushort)(((int)1) << int.Parse(strArray[1]))))));
                            this.logger.Info(string.Format("Write B item : {0}", item.Name));
                        }
                        else
                        {
                            string[] strArray3 = new string[int.Parse(strArray2[0])];
                            string str3 = string.Empty;
                            if (string.IsNullOrEmpty(data[item.Name]))
                            {
                                str3 = str3.PadRight(int.Parse(strArray2[0]) * 0x10, '0');
                            }
                            else
                            {
                                str3 = MNetUtils.CharRevcrse(data[item.Name].PadLeft(int.Parse(strArray2[0]) * 0x10, '0').Trim());
                            }
                            num2 = 0;
                            while (num2 < strArray3.Length)
                            {
                                dst[int.Parse(strArray[0]) + num2] = (ushort)Convert.ToInt32(MNetUtils.CharRevcrse(str3.Substring(num2 * 0x10, 0x10)), 2);
                                num2++;
                            }
                            this.logger.Info(string.Format("Write B item : {0}", item.Name));
                        }
                        continue;
                    Label_045A:
                        str4 = string.IsNullOrEmpty(data[item.Name]) ? data[item.Name].PadLeft(int.Parse(item.Points) * 4) : data[item.Name];
                        for (num2 = 0; num2 < int.Parse(item.Points); num2++)
                        {
                            dst[int.Parse(strArray[0]) + ((int.Parse(item.Points) - 1) - num2)] = (ushort)int.Parse(str4.Substring(num2 * 4, 4), NumberStyles.HexNumber);
                        }
                        this.logger.Info(string.Format("Write H item : {0}", item.Name));
                        continue;
                    Label_0511:
                        representation = strArray2[0];
                        if (representation != null)
                        {
                            if (!(representation == "1"))
                            {
                                if (representation == "2")
                                {
                                    goto Label_057A;
                                }
                            }
                            else
                            {
                                dst[int.Parse(strArray[0])] = (ushort)Convert.ToInt16(data[item.Name]);
                                this.logger.Info(string.Format("Write Signed Int item : {0}", item.Name));
                            }
                        }
                        continue;
                    Label_057A:
                        num3 = string.IsNullOrEmpty(data[item.Name]) ? 0 : Convert.ToInt32(data[item.Name].ToString());
                        dst[int.Parse(strArray[0])] = MNetUtils.LoWord(num3);
                        dst[int.Parse(strArray[0]) + 1] = MNetUtils.HiWord(num3);
                        this.logger.Info(string.Format("Write Signed Int item : {0}", item.Name));
                        continue;
                    Label_05EE:
                        this.logger.Error(string.Format("WriteWord invalid Representation : {0}", item.Representation));
                    }
                }
                if (networkFlag)
                {
                    this.netWorkPlc.Station = stationNo;
                    this.netWorkPlc.Network = netwrokNo;
                    if (((Convert.ToInt32(block.HeadDevice) % 0x8000) < 0x8000) && (0x8000 < ((Convert.ToInt32(block.HeadDevice) % 0x8000) + block.Points)))
                    {
                        int nSize = 0x8000 - (Convert.ToInt32(block.HeadDevice) % 0x8000);
                        int num5 = block.Points - nSize;
                        int num6 = (Convert.ToInt32(block.HeadDevice) + block.Points) - num5;
                        ushort[] numArray2 = new ushort[nSize];
                        ushort[] numArray3 = new ushort[num5];
                        Buffer.BlockCopy(dst, 0, numArray2, 0, nSize * 2);
                        Buffer.BlockCopy(dst, nSize * 2, numArray3, 0, num5 * 2);
                        this.netWorkPlc.WriteWordBlock(block.address, numArray2, nSize);
                        this.netWorkPlc.WriteWordBlock(new MNetDev(block.DeviceCode + num6.ToString()), numArray3, num5);
                    }
                    else
                    {
                        this.netWorkPlc.WriteWordBlock(block.address, dst, block.Points);
                    }
                    this.logger.Info(string.Format("Write NetWorkPlc Block : {0}", block.Name));
                }
                else
                {
                    this.plc.WriteWordBlock(block.address, dst, block.Points);
                    this.logger.Info(string.Format("Write Plc Block : {0}", block.Name));
                }
                return true;
            }
            catch (Exception exception)
            {
                this.logger.Error(string.Format("Write Word Error : {0}, address : {1}, itemname : {2} ", exception.Message, str, name));
                return false;
            }
        }

        public int Channel { get; set; }

        public delegate void ErrorMessageHandler(string message);

        public delegate void ScanTimeoutHandler(object sender, string localName);
    }
}
